package br.ufpr.inf.heuchess.telas.editorheuristica;

import br.ufpr.inf.heuchess.Anotacoes;
import br.ufpr.inf.heuchess.representacao.heuristica.Anotacao;
import br.ufpr.inf.utils.UtilsDataTempo;
import java.awt.Component;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Alexandre Rômolo Moreira Feitosa - alexandreromolo@hotmail.com
 * Created on 14 de Julho de 2006, 16:02
 */
public class RenderListaAnotacoes extends javax.swing.JPanel implements ListCellRenderer {
        
    public RenderListaAnotacoes() {
        initComponents();        
    }
    
    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus){
        
        if (value instanceof Anotacao){
            
            Anotacao anotacao = (Anotacao) value;
        
            jPanelTexto.removeAll();
            
            jLabelIcone.setIcon(Anotacoes.retornaIconeAnotacao(anotacao.getTipo()));            
            
            JTextArea jTextAreaDescricao = new JTextArea();
            jTextAreaDescricao.setEditable(false);
            jTextAreaDescricao.setWrapStyleWord(true);
            jTextAreaDescricao.setLineWrap(true);
            jTextAreaDescricao.setRows(4);
        
            //jTextAreaDescricao.setText(UtilsDataTempo.formataData(anotacao.getDataUltimaModificacao()) + " - " + anotacao.getNome() + " - " + anotacao.getInformacao());                    
            //String texto = UtilsString.cortaTextoMaior(anotacao.getInformacao(),10,true);
            
            jTextAreaDescricao.setText(UtilsDataTempo.formataData(anotacao.getDataUltimaModificacao()) + " - " + anotacao.getNome() + "\n\n" +  anotacao.getInformacao());
          
            JScrollPane jScrollPane = new JScrollPane(jTextAreaDescricao);

            jPanelTexto.add(jScrollPane);

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
                jTextAreaDescricao.setBackground(list.getSelectionBackground());
                jTextAreaDescricao.setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
                jTextAreaDescricao.setBackground(list.getBackground());
                jTextAreaDescricao.setForeground(list.getForeground());
            }

            jPanelTexto.revalidate();
        }
        
        setEnabled(list.isEnabled()); 
        //setOpaque(true);
                
        return this;
        
        /*
        JTextArea ta = new JTextArea();
        ta.setRows(4);
         
        Anotacao anotacao = (Anotacao) value;
        
        ta.setText(UtilsDataTempo.formataData(anotacao.getDataUltimaModificacao()) + " - " + anotacao.getNome() + " - " + anotacao.getInformacao());
        
        JScrollPane scroll = new JScrollPane(ta);
        if (isSelected) {
            ta.setBackground(list.getSelectionBackground());
            ta.setForeground(list.getSelectionForeground());
        } else {
            ta.setBackground(list.getBackground());
            ta.setForeground(list.getForeground());
        }
        Border border = null;
        if (cellHasFocus) {
            if (isSelected) {
                border = UIManager.getBorder("List.focusSelectedCellHighlightBorder");
            }
            if (border == null) {
                border = UIManager.getBorder("List.focusCellHighlightBorder");
            }
        } else {
            border = new EmptyBorder(1, 1, 1, 1);
        }
        ta.setBorder(border);
        ta.setWrapStyleWord(true);
        ta.setLineWrap(true);
        //ta.setToolTipText((String) value);
        return scroll;
        */
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelIcone = new javax.swing.JLabel();
        jPanelTexto = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelIcone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelIcone.setIconTextGap(0);

        jPanelTexto.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelIcone, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanelTexto, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelIcone, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanelTexto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelIcone;
    private javax.swing.JPanel jPanelTexto;
    // End of variables declaration//GEN-END:variables
}